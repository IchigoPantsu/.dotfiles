###dark vim 
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo ='Shougo/defx.nvim'

[[plugins]]
repo = 'kristijanhusak/defx-icons' 
depends = ['defx.vim']

[[plugins]]
repo = 'kristijanhusak/defx-git' 
depends = ['defx.vim']


###よく使われているvimのプラグイン top20
###https://qiita.com/reireias/items/5364dcaada1a5b88a206#1%E4%BD%8D-tpopevim-fugitive

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'airblade/vim-gitgutter'

#[[plugins]]
#repo = 'w0rp/ale'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
hook_add = 'set rtp+=/usr/local/opt/fzf'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Path completion with custom source command
""inoremap <expr> <c-x><c-f> fzf#vim#complete#path('fd')
""inoremap <expr> <c-x><c-f> fzf#vim#complete#path('rg --files')

" Word completion with custom spec with popup layout option
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'window': { 'width': 0.2, 'height': 0.9, 'xoffset': 1 }})

" Replace the default dictionary completion with fzf-based fuzzy completion
inoremap <expr> <c-x><c-k> fzf#vim#complete('cat /usr/share/dict/words')

" Global line completion (not just open buffers. ripgrep required.)
inoremap <expr> <c-x><c-l> fzf#vim#complete(fzf#wrap({
  \ 'prefix': '^.*$',
  \ 'source': 'rg -n ^ --color always',
  \ 'options': '--ansi --delimiter : --nth 3..',
  \ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))

"function! s:make_sentence(lines)
"  return substitute(join(a:lines), '^.', '\=toupper(submatch(0))', '').'.'
"endfunction

"" inoremap <expr> <c-x><c-s> fzf#vim#complete({
"  \ 'source':  'cat /usr/share/dict/words',
"  \ 'reducer': function('<sid>make_sentence'),
"  \ 'options': '--multi --reverse --margin 15%,0',
"  \ 'left':    20})

" fzfによるCUI生活の改善
" https://blog.nijohando.jp/post/fzf-fish-vim/
nnoremap [Fzf] <Nop>
nmap <Leader>f [Fzf]
nnoremap [Fzf]f :<C-u>Files<CR>
nnoremap [Fzf]g :<C-u>GFiles<CR>
nnoremap [Fzf]G :<C-u>GFiles?<CR>
nnoremap [Fzf]b :<C-u>Buffers<CR>
nnoremap [Fzf]h :<C-u>History<CR>

" 画面分割
" nnoremap <C-s> <C-w>v
nnoremap <C-v> <C-w>v<C-w>l:<C-u>Files<CR>
" nnoremap <C-s> <C-w>s
nnoremap <C-s> <C-w>s<C-w>j:<C-u>Files<CR>

" Tab
" nnoremap <silent> <S-Tab> :tabnew<CR>
'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = ['vim-airline']

[[plugins]]
repo = 'sheerun/vim-polyglot'

#[[plugins]]
#repo = 'SirVer/ultisnips'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

###オレ的vimプラグイン10選
###https://qiita.com/reireias/items/beaa3bb0e299ae934217

# [[plugins]]
# repo = 'dhruvasagar/vim-table-mode'

#[[plugins]]
#repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'thinca/vim-quickrun'

#[[plufins]]
#repo = 'mattn/sonictemplate-vim'


###おすすめプラグイン 〜 Vimはいいぞ！ゴリラと学ぶVim講座(7)
###https://knowledge.sakura.ad.jp/23248/

#[[plugins]]
#repo = 'previm/previm'

#[[plugins]]
#repo = 'vim-jp/vimdoc-ja'

#[[plugins]]
#repo = 'markonm/traces.vim'

#[[plugins]]
#repo = 'skanehira/translate.vim'

###
#[[plugin]]
#repo = '/tomasr/molokai'
#hook_add = '''
#  syntax on
#  colorscheme molokai
#  set t_Co=256
#'''


# Vimの生産性を高める12の方法
# https://postd.cc/how-to-boost-your-vim-productivity/ 
[[plugins]]
repo = 'terryma/vim-expand-region'


# clever-f.vim でカーソルの横移動を便利にする
# https://rhysd.hatenablog.com/entry/2013/09/17/220837
[[plugins]]
repo = 'rhysd/clever-f.vim'


# Vimの縦移動を強化する
# https://qiita.com/uji_/items/5cc267d6a96c417a29ef
[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = 'let g:loaded_matchit = 1'


# 僕の推し Vimプラグインを見て！
# https://aiya000.github.io/Maid/vimconf.swp.2018/#/
[[plugins]]
repo = 'LeafCage/foldCC'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

#[[plugins]]
#repo = 'nathanaelkane/vim-indent-guides'


# 僕がVimで愛用しているプラグイン30連発
# https://liginc.co.jp/469142
#[[plugins]]
#repo = 'https://github.com/ervandew/supertab'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
map <Leader> <Plug>(easymotion-prefix)
map <leader>s <Plug>(easymotion-s2)

" map <leader>f <Plug>(easymotion-bd-f2)
" nmap <leader>f <Plug>(easymotion-overwin-f2)

map f <Plug>(easymotion-fl)
map t <Plug>(easymotion-tl)
map F <Plug>(easymotion-Fl)
map T <Plug>(easymotion-Tl)

" Gif config
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)

" Gif config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" Gif config
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

let g:EasyMotion_use_migemo = 1
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
" If you want to start window resize mode by `Ctrl+T`
let g:winresizer_start_key = '<C-r>'
" change keycode_mode 101(e) <-> 114(r)
let g:winresizer_keycode_mode = 114 
let g:winresizer_keycode_resize = 101
'''

#[[plugins]]
#repo = 'yuttie/comfortable-motion.vim'

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''


# vim8,neovimで補完使うならdeopleteよりvim-lsp使おうぜ
# http://kutimoti.hatenablog.com/entry/2018/05/20/110732
#[[plugins]]
#repo = 'prabirshrestha/async.vim'

#[[plugins]]
#repo = 'prabirshrestha/vim-lsp'
#hook_add = '''
#if executable('clangd')
#    au User lsp_setup call lsp#register_server({
#        \ 'name': 'clangd',
#        \ 'cmd': {server_info->['clangd']},
#        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
#        \ })
#endif

#let g:lsp_signs_enabled = 1         " enable signs
#let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode

#let g:lsp_signs_error = {'text': '✗'}
#let g:lsp_signs_warning = {'text': '‼'}
#'''

#[[plugins]]
#repo = 'prabirshrestha/asyncomplete.vim'

#[[plugins]]
#repo = 'prabirshrestha/asyncomplete-lsp.vim'

#[[plugins]]
#repo='prabirshrestha/asyncomplete-neosnippet.vim'
#hook_add='''
#call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
#    \ 'name': 'neosnippet',
#    \ 'whitelist': ['*'],
#    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
#    \ }))
#imap <C-k>     <Plug>(neosnippet_expand_or_jump)
#smap <C-k>     <Plug>(neosnippet_expand_or_jump)
#xmap <C-k>     <Plug>(neosnippet_expand_target)
#'''


# Vim Bootstrap 基本プラグイン
# https://qiita.com/uyo/items/2f8f1d6173b7ee0c0fac
[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'majutsushi/tagbar'


### color scheme
[[plugins]]
repo = 'ayu-theme/ayu-vim'
hook_add = '''
set termguicolors     " enable true colors support
"let ayucolor="light"  " for light version of theme
let ayucolor="mirage" " for mirage version of theme
"let ayucolor="dark"   " for dark version of theme
colorscheme ayu
'''


### completion lint tools by language-server-protocol
[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'mattn/vim-lsp-settings'
merged = '0'
[[plugins]]
repo = 'mattn/vim-lsp-icons'
[[plugins]]
repo = 'mattn/efm-langserver'

#[[plugins]]
#repo = 'Shougo/neosnippet.vim'

#[[plugins]]
#repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

let g:asyncomplete_auto_popup = 0
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ asyncomplete#force_refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
'''
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

#[[plugins]]
#repo='prabirshrestha/asyncomplete-neosnippet.vim'
#hook_add='''
#call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
#    \ 'name': 'neosnippet',
#    \ 'whitelist': ['*'],
#    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
#    \ }))
#imap <C-k>     <Plug>(neosnippet_expand_or_jump)
#smap <C-k>     <Plug>(neosnippet_expand_or_jump)
#xmap <C-k>     <Plug>(neosnippet_expand_target)
#'''
