
#[[plugins]]
#repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

#[[plugins]]
#repo ='Shougo/defx.nvim'

#[[plugins]]
#repo = 'kristijanhusak/defx-icons' 
#depends = ['Shougo/defx.nvim']

#[[plugins]]
#repo = 'kristijanhusak/defx-git' 
#depends = ['Shougo/defx.nvim']



###よく使われているvimのプラグイン top20
##https://qiita.com/reireias/items/5364dcaada1a5b88a206#1%E4%BD%8D-tpopevim-fugitive

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add ='''
"let g:gitgutter_highlight_lines = 1
set updatetime=100
'''

#[[plugins]]
#repo = 'w0rp/ale'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
hook_add = 'set rtp+=/usr/local/opt/fzf'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['junegunn/fzf']
hook_add = '''
"" Mapping selecting mappings
" nmap <leader><tab> <plug>(fzf-maps-n)
" xmap <leader><tab> <plug>(fzf-maps-x)
" omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)

imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Path completion with custom source command
"inoremap <expr> <c-x><c-f> fzf#vim#complete#path('fd')
inoremap <expr> <c-x><c-f> fzf#vim#complete#path('rg --files')

" Word completion with custom spec with popup layout option
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'window': { 'width': 0.2, 'height': 0.9, 'xoffset': 1 }})

" Replace the default dictionary completion with fzf-based fuzzy completion
inoremap <expr> <c-x><c-k> fzf#vim#complete('cat /usr/share/dict/words')

" Global line completion (not just open buffers. ripgrep required.)
inoremap <expr> <c-x><c-l> fzf#vim#complete(fzf#wrap({
  \ 'prefix': '^.*$',
  \ 'source': 'rg -n ^ --color always',
  \ 'options': '--ansi --delimiter : --nth 3..',
  \ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))

"function! s:make_sentence(lines)
"  return substitute(join(a:lines), '^.', '\=toupper(submatch(0))', '').'.'
"endfunction

"" inoremap <expr> <c-x><c-s> fzf#vim#complete({
"  \ 'source':  'cat /usr/share/dict/words',
"  \ 'reducer': function('<sid>make_sentence'),
"  \ 'options': '--multi --reverse --margin 15%,0',
"  \ 'left':    20})

""[vim fzf get selected word as --query parameter - Stack Overflow](https://stackoverflow.com/questions/47994025/vim-fzf-get-selected-word-as-query-parameter)
function! s:getVisualSelection()
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)

    if len(lines) == 0
        return ""
    endif

    let lines[-1] = lines[-1][:column_end - (&selection == "inclusive" ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]

    return join(lines, "\n")
endfunction
"vnoremap <silent><leader>f <Esc>:FZF -q <C-R>=<SID>getVisualSelection()<CR><CR>

"" fzfによるCUI生活の改善
"" https://blog.nijohando.jp/post/fzf-fish-vim/
"nnoremap [Fzf] <Nop>
"nmap <Leader><Leader> [Fzf]
"nnoremap [Fzf]f :<C-u>Files ./<CR>
"nnoremap [Fzf]F :<C-u>Files ~<CR>
"nnoremap [Fzf]g :<C-u>GFiles<CR>
"nnoremap [Fzf]G :<C-u>GFiles?<CR>
"nnoremap [Fzf]b :<C-u>Buffers<CR>
"nnoremap [Fzf]h :<C-u>History<CR>
"" オレオレセッティング
"nnoremap [Fzf]a :<C-u>Ag<CR>
"nnoremap [Fzf]r :<C-u>Rg<CR>
"nnoremap [Fzf]C :<C-u>Commands<CR>
"nnoremap [Fzf]l :<C-u>Lines<CR>

"nnoremap <C-f> :<C-u>Files ./<CR>
"nnoremap <C-f> :<C-u>Files ~<CR>
"vnoremap <C-f> :<C-u>Files ~ <C-R>=<SID>getVisualSelection()<CR><CR>

command! -bang -nargs=* GitFiles
  \ call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case --files".shellescape(<q-args>), 1, fzf#vim#with_preview({'dir': system('git rev-parse --show-toplevel 2> /dev/null')[:-2]}), <bang>0)

nnoremap <C-t> :<C-u>GitFiles<CR>
vnoremap <C-t> :<C-u>GitFiles <C-R>=<SID>getVisualSelection()<CR><CR>

nnoremap <C-b> :<C-u>Buffers<CR>
vnoremap <C-b> :<C-u>Buffers <C-R>=<SID>getVisualSelection()<CR><CR>

nnoremap <C-h> :<C-u>History<CR>
vnoremap <C-h> :<C-u>History <C-R>=<SID>getVisualSelection()<CR><CR>

" オレオレセッティング
"nnoremap <C-a> :<C-u>Ag<CR>
"vnoremap <C-a> :<C-u>Ag <C-R>=<SID>getVisualSelection()<CR><CR>

"[Rg from different directory · Issue #837 · junegunn/fzf.vim](https://github.com/junegunn/fzf.vim/issues/837)
command! -bang -nargs=* GitRg
  \ call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, fzf#vim#with_preview({'dir': system('git rev-parse --show-toplevel 2> /dev/null')[:-2]}), <bang>0)

nnoremap <C-f> :<C-u>GitRg<CR>
vnoremap <C-f> :<C-u>GitRg <C-R>=<SID>getVisualSelection()<CR><CR>
nnoremap <C-r> :<C-u>History:<CR>
vnoremap <C-r> :<C-u>History: <C-R>=<SID>getVisualSelection()<CR><CR>
nnoremap <C-Space> :<C-u>Commands<CR>
vnoremap <C-Space> :<C-u>Commands <C-R>=<SID>getVisualSelection()<CR><CR>
nnoremap <C-_> :<C-u>History/<CR>
vnoremap <C-_> :<C-u>History/ <C-R>=<SID>getVisualSelection()<CR><CR>

nnoremap <C-l> :<C-u>Lines<CR>
vnoremap <C-l> :<C-u>Lines <C-R>=<SID>getVisualSelection()<CR><CR>
" 画面分割
" nnoremap <C-v> <C-w>v<C-w>l:<C-u>Files<CR>
" nnoremap <C-s> <C-w>s<C-w>j:<C-u>Files<CR>

" Tab
" nnoremap <silent> <S-Tab> :tabnew<CR>
'''

#[[plugins]]
#repo = 'gfanto/fzf-lsp.nvim'
#depends = ['junegunn/fzf','junegunn/fzf.vim']

[[plugins]]
repo = 'antoinemadec/coc-fzf'
depends = ['junegunn/fzf','junegunn/fzf.vim','neoclide/coc.nvim']
hook_add ='''
" mappings
nnoremap [Fzf] <Nop>
nmap <Leader><Leader> [Fzf]
"nnoremap [Fzf]cl       :<C-u>CocFzfList<CR>
"nnoremap [Fzf]cd       :<C-u>CocFzfList diagnostics<CR>
"nnoremap [Fzf]cD       :<C-u>CocFzfList diagnostics --current-buf<CR>
"nnoremap [Fzf]cc       :<C-u>CocFzfList commands<CR>
"nnoremap [Fzf]ce       :<C-u>CocFzfList extensions<CR>
"nnoremap [Fzf]cL       :<C-u>CocFzfList location<CR>
"nnoremap [Fzf]co       :<C-u>CocFzfList outline<CR>
"nnoremap [Fzf]cs       :<C-u>CocFzfList symbols<CR>
"nnoremap [Fzf]cp       :<C-u>CocFzfListResume<CR>

nnoremap <C-c><C-l>       :<C-u>CocFzfList<CR>
nnoremap <C-c><C-d>       :<C-u>CocFzfList diagnostics<CR>
"nnoremap <C-c><C-d>       :<C-u>CocFzfList diagnostics --current-buf<CR>
nnoremap <C-c><C-c>       :<C-u>CocFzfList commands<CR>
nnoremap <C-c><C-e>       :<C-u>CocFzfList extensions<CR>
nnoremap <C-c><C-L>       :<C-u>CocFzfList location<CR>
nnoremap <C-c><C-o>       :<C-u>CocFzfList outline<CR>
nnoremap <C-c><C-s>       :<C-u>CocFzfList symbols<CR>
nnoremap <C-c><C-p>       :<C-u>CocFzfListResume<CR>
'''
#[[plugins]]
#repo = 'pbogut/fzf-mru.vim'
#depends = ['junegunn/fzf','junegunn/fzf.vim','neoclide/coc.nvim']

#[[plugins]]
#repo = 'sakhnik/nvim-gdb'
#build = ':!./install.sh'
#hook_add = """
#" We're going to define single-letter keymaps, so don't try to define them
#" in the terminal window.  The debugger CLI should continue accepting text commands.
#function! NvimGdbNoTKeymaps()
#  tnoremap <silent> <buffer> <esc> <c-\><c-n>
#endfunction
#
#let g:nvimgdb_config_override = {
#  \ 'key_next': 'n',
#  \ 'key_step': 's',
#  \ 'key_finish': 'f',
#  \ 'key_continue': 'c',
#  \ 'key_until': 'u',
#  \ 'key_breakpoint': 'b',
#  \ 'set_tkeymaps': "NvimGdbNoTKeymaps",
#  \ }
#
#"""

## debug
## depend on python3 provider
## type: pip3 install pynvim
#[[plugins]]
#repo = 'puremourning/vimspector'
#on_ft = ["c","cpp","go","rust","python","javascript"]
#build = './install_gadget.py --all --force-enable-rust --disable-tcl'
#hook_add ='''
#let g:vimspector_enable_mappings = 'VISUAL_STUDIO'
#
#nmap <leader>ds :call vimspector#Launch()<CR>	
#"nmap <leader>dc <Plug>VimspectorContinue	
#"nmap <leader>dS <Plug>VimspectorStop
#"nmap <leader>dR <Plug>VimpectorRestart
#"nmap <leader>dP <Plug>VimspectorPause
#nmap <leader>b <Plug>VimspectorToggleBreakpoint
#"nmap <Plug>VimspectorToggleConditionalBreakpoint
#"nmap <Plug>VimspectorAddFunctionBreakpoint
#nmap <leader>dr <Plug>VimspectorRunToCursor
#"nmap <Plug>VimspectorStepOver
#"nmap <Plug>VimspectorStepInto
#"nmap <Plug>VimspectorStepOut
#"nmap <expr><CR> exists("g:_vimspector_session") ? <Plug>VimspectorBalloonEval : <CR>
#"xmap <expr><CR> _vimspector_session ? <Plug>VimspectorBalloonEval : <CR>
#
#function! s:my_cr()
#  try
#    <Plug>VimspectorBalloonEval
#  catch
#    <CR>
#  endtry
#endfunction
#nmap <CR> :call my_cr() <CR>
#'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = ['vim-airline/vim-airline']

#[[plugins]]
#repo = 'glepnir/spaceline.vim'
# Use the icon plugin for better behavior
#[[plugins]]
#repo = 'ryanoasis/vim-devicons' 
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'sheerun/vim-polyglot'

#[[plugins]]
#repo = 'SirVer/ultisnips'

[[plugins]]
repo = 'jiangmiao/auto-pairs'



###オレ的vimプラグイン10選
###https://qiita.com/reireias/items/beaa3bb0e299ae934217

# [[plugins]]
# repo = 'dhruvasagar/vim-table-mode'

#[[plugins]]
#repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = 'set splitbelow'

#[[plugins]]
#repo = 'mattn/sonictemplate-vim'

###gすすめプラグイン 〜 Vimはいいぞ！ゴリラと学ぶVim講座(7)
###https://knowledge.sakura.ad.jp/23248/

# [[plugins]]
# repo = 'previm/previm'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# [[plugins]]
# repo = 'markonm/traces.vim'

# [[plugins]]
# repo = 'skanehira/translate.vim'

# [[plugin]]
# repo = '/tomasr/molokai'
# hook_add = '''
# syntax on
# colorscheme molokai
# set t_Co=256
# '''

[[plugins]]
repo = 'kana/vim-operator-user'
[[plugins]]
repo = 'kana/vim-operator-replace'
depends = ['kana/vim-operator-user']

#kana/vim-textobj-user/wiki
#https://github.com/kana/vim-textobj-user/wiki
[[plugins]]
repo = 'kana/vim-textobj-user'

#al/il for the current line
[[plugins]]
repo = 'kana/vim-textobj-line'

#ae/ie for the entire region of the current buffer
[[plugins]]
repo = 'kana/vim-textobj-entire'

#af/if and aF/iF for a function / extensible for any language
[[plugins]]
repo = 'kana/vim-textobj-indent'

#ay/iy for a syntax-highlighted item
[[plugins]]
repo = 'kana/vim-textobj-syntax'

#adh/idh and others for various elements in diff(1) output
[[plugins]]
repo = 'kana/vim-textobj-diff'

#af{char}/if{char} for a region between {char}s
[[plugins]]
repo = 'thinca/vim-textobj-between'

#ac/ic for a comment
[[plugins]]
repo = 'thinca/vim-textobj-comment'

#ap/ip for next file path (w/o basename), aP/iP for the previous file path (w/o basename)
[[plugins]]
repo = 'paulhybryant/vim-textobj-path'

#au/iu for a URL
[[plugins]]
repo ='mattn/vim-textobj-url'

# isb/asb for the closest region between any of () [] or {}.
[[plugins]]
repo ='osyo-manga/vim-textobj-multiblock'

#av/iv for a region between either _s or camelCaseVariables
[[plugins]]
repo = 'Julian/vim-textobj-variable-segment'

#aT/iT for "top level" blocks of code in arbitrary programming language
[[plugins]]
repo = 'adolenc/vim-textobj-toplevel'



### Vimの生産性を高める12の方法
# https://postd.cc/how-to-boost-your-vim-productivity/ 
[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''

" Default settings. (NOTE: Remove comments in dictionary before sourcing)
let g:expand_region_text_objects = {
      \ "iw" :0,
      \ "iW" :0,
      \ "isb" :1,
      \ "asb" :1,
      \ "il" :0,
      \ "ii" :1,
      \ "ai" :1,
      \ }

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
'''



# clever-f.vim でカーソルの横移動を便利にする
# https://rhysd.hatenablog.com/entry/2013/09/17/220837
[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
let g:clever_f_ignore_case = 1
let g:clever_f_smart_case = 1
'''



# Vimの縦移動を強化する
# https://qiita.com/uji_/items/5cc267d6a96c417a29ef
[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = 'let g:loaded_matchit = 1'



# 僕の推し Vimプラグインを見て！
# https://aiya000.github.io/Maid/vimconf.swp.2018/#/
[[plugins]]
repo = 'LeafCage/foldCC'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

#[[plugins]]
#repo = 'nathanaelkane/vim-indent-guides'



# 僕がVimで愛用しているプラグイン30連発
# https://liginc.co.jp/469142
#[[plugins]]
#repo = 'https://github.com/ervandew/supertab'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_do_mapping = 0
"map <Leader> <Plug>(easymotion-prefix)

" Gif config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
"map n <Plug>(easymotion-next)
"map N <Plug>(easymotion-prev)

"let g:EasyMotion_use_migemo = 0
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_add_search_history = 1

"map <Leader>l <Plug>(easymotion-lineforward)
"map <Leader>j <Plug>(easymotion-j)
"map <Leader>k <Plug>(easymotion-k)
"map <Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
" If you want to start window resize mode by `Ctrl+T`
let g:winresizer_start_key = 'wr'
" change keycode_mode 101(e) <-> 114(r)
let g:winresizer_keycode_mode = 114 
let g:winresizer_keycode_resize = 101
'''

#[[plugins]]
#repo = 'yuttie/comfortable-motion.vim'


# Vim Bootstrap 基本プラグイン
# https://qiita.com/uyo/items/2f8f1d6173b7ee0c0fac
[[plugins]]
repo = 'Yggdroot/indentLine'

# [[plugins]]
# repo = 'majutsushi/tagbar'

# ### completion lint tools by language-server-protocol
# [[plugins]]
# repo = 'prabirshrestha/async.vim'
# [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
# hook_add = '''
# nmap gD <Plug>(lsp-peek-definition)
# vmap gD <Plug>(lsp-peek-definition)
# nmap gd <Plug>(lsp-definition)
# vmap gD <Plug>(lsp-definition)
# 
# nmap gC <Plug>(lsp-peek-declaration)
# vmap gC <Plug>(lsp-peek-declaration)
# nmap gc <Plug>(lsp-declaration)
# vmap gc <Plug>(lsp-declaration)
# 
# nmap gT <Plug>(lsp-peek-type-definition)
# vmap gT <Plug>(lsp-peek-type-definition)
# nmap gt <Plug>(lsp-type-definition)
# vmap gt <Plug>(lsp-type-definition)
# 
# nmap gI <Plug>(lsp-peek-implementation)
# vmap gI <Plug>(lsp-peek-implementation)
# nmap gi <Plug>(lsp-implementation)
# vmap gi <Plug>(lsp-implementation)
# 
# "nmap ge <Plug>(lsp-next-error)
# "vmap ge <Plug>(lsp-next-error)
# "nmap gE <Plug>(lsp-previous-error)
# "vmap gE <Plug>(lsp-previous-error)
# 
# nmap gw <Plug>(lsp-next-diagnostic)
# vmap gw <Plug>(lsp-next-diagnostic)
# nmap gW <Plug>(lsp-previous-diagnostic)
# vmap gW <Plug>(lsp-previous-diagnostic)
# 
# let g:lsp_log_file = ''
# let g:lsp_log_verbose = 0
# 
# " https://dev.to/moniquelive/haskell-lsp-bonus-for-vim-4nlj
# " vim-lsp-settings won't detect hls automatically as of today (2020-10-26). Let's teach it:
# if (executable('haskell-language-server-wrapper'))
#   au User lsp_setup call lsp#register_server({
#       \ 'name': 'haskell-language-server-wrapper',
#       \ 'cmd': {server_info->['haskell-language-server-wrapper', '--lsp']},
#       \ 'whitelist': ['haskell'],
#       \ })
# endif
# 
# " My Mappings
# function! s:on_lsp_buffer_enabled() abort
#     setlocal omnifunc=lsp#complete
#     setlocal signcolumn=yes
#     if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
#     nmap <buffer> gd <plug>(lsp-definition)
#     nmap <buffer> gr <plug>(lsp-references)
#     nmap <buffer> gf <plug>(lsp-code-action)
#     nmap <buffer> gi <plug>(lsp-implementation)
#     nmap <buffer> gt <plug>(lsp-type-definition)
#     nmap <buffer> <F2> <plug>(lsp-rename)
#     nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
#     nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
#     nmap <buffer> K <plug>(lsp-hover)
#     xmap <buffer> f <plug>(lsp-document-range-format)
#     nmap <buffer> <F5> <plug>(lsp-code-lens)
# 
#     " buffer format on save
#     " autocmd BufWritePre <buffer> LspDocumentFormatSync
# endfunction
# 
#   " Decorations
# augroup lsp_install
#     au!
#     let g:lsp_signs_enabled = 1         " enable signs
#     let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
#     let g:lsp_signs_error = {'text': '✗'}
#     " let g:lsp_signs_warning = {'text': '‼', 'icon': '/path/to/some/icon'} " icons require GUI
#     " let g:lsp_signs_hint = {'icon': '/path/to/some/other/icon'} " icons require GUI
#     let g:lsp_signs_warning = {'text': '‼'}
#     let g:lsp_highlight_references_enabled = 1
#     highlight link LspErrorText GruvboxRedSign " requires gruvbox
#     highlight clear LspWarningLine
#     " highlight lspReference ctermfg=red guifg=red ctermbg=green guibg=green
#     highlight lspReference guibg=#303010
# 
#     " call s:on_lsp_buffer_enabled only for languages that has the server registered.
#     autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
# augroup END
# 
# '''
# [[plugins]]
# repo = 'mattn/vim-lsp-settings'
# merged = '0'
# hook_add = '''
# "let g:lsp_settings = {
# "\  'clangd': {'cmd': ['clangd-6.0']},
# "\  'efm-langserver': {'disabled': v:false}
# "\}
# '''
# [[plugins]]
# repo = 'mattn/vim-lsp-icons'
# [[plugins]]
# repo = 'mattn/efm-langserver'
# 
# 
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete.vim'
# hook_add = '''
# "inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
# "inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
# inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
# 
# let g:asyncomplete_auto_popup = 0
# function! s:check_back_space() abort
#     let col = col('.') - 1
#     return !col || getline('.')[col - 1]  =~ '\s'
# endfunction
# 
# inoremap <silent><expr> <TAB>
# "  \ pumvisible() ? "\<C-n>" :
#   \ <SID>check_back_space() ? "\<TAB>" :
#   \ asyncomplete#force_refresh()
# " inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
# 
# " オレオレセッティング
# let g:asyncomplete_auto_completeopt = 0
# 
# " Vimの補完を他エディタやIDEのような挙動にするようにする 
# " https://note.com/yasukotelin/n/na87dc604e042
# " 補完表示時のEnterで改行をしない
# inoremap <expr><CR>  pumvisible() ? "<C-y>" : "<CR>"
# set completeopt=menuone,noinsert
# inoremap <expr><C-n> pumvisible() ? "<Down>" : "<C-n>"
# inoremap <expr><C-p> pumvisible() ? "<Up>" : "<C-p>"
# 
# "オレオレセッティング
# inoremap <expr><esc> pumvisible() ? "<CR>" : "<esc>"
# '''
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-lsp.vim'
# 
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-file.vim'
# hook_add = '''
# au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
#     \ 'name': 'file',
#     \ 'whitelist': ['*'],
#     \ 'priority': 10,
#     \ 'completor': function('asyncomplete#sources#file#completor')
#     \ }))
# '''
# 
# [[plugins]]
# repo = 'yami-beta/asyncomplete-omni.vim'
# hook_add = '''
# call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
# \ 'name': 'omni',
# \ 'whitelist': ['*'],
# \ 'blacklist': [],
# \ 'completor': function('asyncomplete#sources#omni#completor')
# \  }))
# '''


#[[plugins]]
#repo='prabirshrestha/asyncomplete-neosnippet.vim'
#hook_add='''
#call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
#    \ 'name': 'neosnippet',
#    \ 'whitelist': ['*'],
#    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
#    \ }))
#imap <C-k>     <Plug>(neosnippet_expand_or_jump)
#smap <C-k>     <Plug>(neosnippet_expand_or_jump)
#xmap <C-k>     <Plug>(neosnippet_expand_target)
#'''

#w3m.vimで快適ブラウジング
#https://sites.google.com/site/hymd3a/vim/w3m-vim
#[[plugins]]
#repo = 'yuratomo/w3m.vim'
#hook_add = '''
#nnoremap <leader>w :W3mTab google 
#let g:w3m#external_browser = 'firefox'
#nnoremap <leader>E :W3mShowExtenalBrowser
#let g:w3m#hit_a_hint_key = 'f'
#'''

[[plugins]]
repo = 'pseewald/vim-anyfold'
hook_add = '''
filetype plugin indent on " required
syntax on                 " required
" activate for all filetypes
autocmd Filetype * AnyFoldActivate
" or
" activate for a specific filetype
"autocmd Filetype <your-filetype> AnyFoldActivate
" close all folds
" set foldlevel=0
" or
" Open all folds
 set foldlevel=99 
'''

#[[plugins]]
#repo = 'luochen1990/rainbow'
#hook_add = '''
#"set to 0 if you want to enable it later via :RainbowToggle
#let g:rainbow_active = 1
#'''

[[plugins]]
repo = 'arecarn/vim-fold-cycle'
hook_add = '''
" disable default mappings
let g:fold_cycle_default_mapping = 0 
" Won't close when max fold is opened
let g:fold_cycle_toggle_max_open  = 0
" Won't open when max fold is closed
let g:fold_cycle_toggle_max_close = 0
'''

[[plugins]]
repo = 'dominikduda/vim_current_word'
hook_add = '''
let g:vim_current_word#highlight_current_word = 0
'''

# [[plugins]]
# repo = 'lfilho/cosco.vim'
# hook_add '''
# let g:cosco_ignore_comment_lines = 1
# '''

# [[plugins]]
# repo = 'voldikss/vim-translator'
# hook_add = '''
# "let g:translator_target_lang = "ja"
# "let g:translator_default_engines = "google"

# """ Configuration example
# " Echo translation in the cmdline
# nmap <silent> <Leader>t <Plug>Translate
# vmap <silent> <Leader>t <Plug>TranslateV
# " Display translation in a window
# nmap <silent> <Leader>w <Plug>TranslateW
# vmap <silent> <Leader>w <Plug>TranslateWV
# " Replace the text with translation
# nmap <silent> <Leader>r <Plug>TranslateR
# vmap <silent> <Leader>r <Plug>TranslateRV
# " Translate the text in clipboard
# nmap <silent> <Leader>x <Plug>TranslateX
# '''

#[How I'm able to take notes in mathematics lectures using LaTeX and Vim | Gilles Castel](https://castel.dev/post/lecture-notes-1/)
[[plugins]]
repo = 'lervag/vimtex'
hook_add = '''
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
'''

#:CocInstall coc-snippets
#[neoclide/coc-snippets: Snippets solution for coc.nvim](https://github.com/neoclide/coc-snippets)
[[plugins]]
repo = 'sirver/ultisnips'
hook_add = '''
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

"[Setting up Ultisnips for Neovim - jdhao's blog](https://jdhao.github.io/2019/04/17/neovim_snippet_s1/)
let g:UltiSnipsSnippetDirectories=["UltiSnips", "my_snippets"]
'''


[[plugins]]
repo = 'KeitaNakamura/tex-conceal.vim'
hook_add = '''
set conceallevel=1
let g:tex_conceal='abdmg'
hi Conceal ctermbg=none
'''

# vim・neovimでできるマークダウン　[リアルタイムプレビュー完備]
# https://qiita.com/Nedward/items/24a6c5aaec8c4fd86626
[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_conceal = 0
"let g:tex_conceal = ""
"let g:vim_markdown_math = 1
let g:vim_markdown_conceal_code_blocks = 0
nmap <Plug> <Plug>Markdown_OpenUrlUnderCursor
vmap <Plug> <Plug>Markdown_OpenUrlUnderCursor
'''

[[plugins]]
repo = 'IchigoPantsu/previm'
hook_add = '''
autocmd BufRead,BufNewFile *.md  set filetype=markdown
nnoremap <silent> <C-p> :PrevimOpen<CR>
let g:previm_open_cmd = 'xdg-open'
let g:vim_markdown_folding_disabled=1
let g:previm_enable_realtime=1
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
" disable netrw's gx mapping.
let g:netrw_nogx = 1 
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
let g:openbrowser_default_search = 'duckduckgo'
'''

#[[plugins]]
#repo = 'rafaqz/ranger.vim'
#depends = ['rbgrouleff/bclose.vim']

# for renger-explorer.vim
#[[plugins]]
#repo = 'rbgrouleff/bclose.vim'

# [[plugins]]
# repo = 'adelarsq/vim-hackernews'

#for Regolith
#[[plugins]]
#repo = 'ayu-theme/ayu-vim'

#for manjaro_i3wm
#[[plugins]]
#repo = 'sainnhe/sonokai'

# [[plugins]]
# repo = 'glidenote/memolist.vim'
# hook_add = '''
# nnoremap <Leader>mn  :MemoNew<CR>
# nnoremap <Leader>ml  :MemoList<CR>
# nnoremap <Leader>mg  :MemoGrep<CR>
# let g:memoist_fzf = 1
# '''

# [[plugins]]
# repo = 'kana/vim-altercmd'
# hook_add = '''
# call altercmd#load()
# "AlterCommand greeting Greeting
# '''

[[plugins]]
repo = 'rhysd/accelerated-jk'
hook_add = '''
  nmap j <Plug>(accelerated_jk_gj)
  nmap k <Plug>(accelerated_jk_gk)
'''

# [[plugins]]
# repo = 'blindFS/vim-taskwarrior'
# hook_add = '''
# '''

[[plugins]]
repo = 'wellle/visual-split.vim'
hook_add = '''
"vmap <C-W><C-r> <Plug>(Visual-Split-VSResize)
"vmap <C-W><C-s> <Plug>(Visual-Split-VSSplitAbove)
"vmap <C-W><C-v> <Plug>(Visual-Split-VSSplitBelow)
"vmap <C-W>r <Plug>(Visual-Split-VSResize)
"vmap <C-W>s <Plug>(Visual-Split-VSSplitAbove)
"vmap <C-W>v <Plug>(Visual-Split-VSSplitBelow)

vmap wr <Plug>(Visual-Split-VSResize)
vmap wx <Plug>(Visual-Split-VSSplitAbove)
vmap wv <Plug>(Visual-Split-VSSplitBelow)
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = '0'
hook_add = '''
" [GitHub - neoclide/coc.nvim: Nodejs extension host for vim & neovim, load extensions like VSCode and host language servers.](https://github.com/neoclide/coc.nvim)

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=100

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
"nmap <silent> [g <Plug>(coc-diagnostic-prev)
"nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <leader>h <Plug>(coc-diagnostic-prev)
nmap <leader>l <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap gk :call <SID>show_documentation()<CR>
" Use J to show documentation in preview window.
nnoremap gj <Plug>(coc-codeaction)

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

"" Remap <C-f> and <C-b> for scroll float windows/popups.
"if has('nvim-0.4.0') || has('patch-8.2.0750')
"  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
"  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
"  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
"  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
"  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
"  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
"endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
"nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
"nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
"nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
"nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
"nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
"nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
"nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
"nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

set pumblend=10

"let g:coc_global_extensions=['coc-cmake','coc-rust-analyzer']
'''

#[[plugin]]
#repo = 'https://github.com/dense-analysis/ale'
#'''
#let g:ale_linters = {'cs': ['OmniSharp']}
#'''

[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
hook_add = '''
"for Unity
let g:OmniSharp_server_use_mono = 1
'''

#[[plugins]]
#repo = 'morhetz/gruvbox'

[[plugins]]
repo = 'glepnir/oceanic-material'

#[[plugins]]
#repo = 'norcalli/nvim-colorizer.lua'
#hook_add = '''
#lua require'colorizer'.setup()
#'''

### [Neovim LSP, DAP and Fuzzy Finder. Overview | by alpha2phi | The Startup | Jan, 2021 | Medium](https://medium.com/swlh/neovim-lsp-dap-and-fuzzy-finder-60337ef08060)

# LSP and Auto Completion Setup
#[[plugins]]
#repo = 'neovim/nvim-lspconfig'
#hook_add ='''
#" -------------------- LSP ---------------------------------
#:lua << EOF
#  local nvim_lsp = require('lspconfig')
#
#  local on_attach = function(client, bufnr)
#    require('completion').on_attach()
#
#    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
#    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
#
#    buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
#
#    -- Mappings
#    local opts = { noremap=true, silent=true }
#    buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
#    buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
#    buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
#    buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
#    
#    buf_set_keymap('n', '<space>k', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
#    buf_set_keymap('n', '<space>K', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
#    buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
#    buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
#    buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
#    buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
#    buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
#    buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
#    buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
#    
#    buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
#    buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
#
#    -- Set some keybinds conditional on server capabilities
#    if client.resolved_capabilities.document_formatting then
#        buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
#    elseif client.resolved_capabilities.document_range_formatting then
#        buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
#    end
#
#    -- Set autocommands conditional on server_capabilities
#    if client.resolved_capabilities.document_highlight then
#        require('lspconfig').util.nvim_multiline_command [[
#        :hi LspReferenceRead cterm=bold ctermbg=red guibg=LightYellow
#        :hi LspReferenceText cterm=bold ctermbg=red guibg=LightYellow
#        :hi LspReferenceWrite cterm=bold ctermbg=red guibg=LightYellow
#        augroup lsp_document_highlight
#            autocmd!
#            autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
#            autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
#        augroup END
#        ]]
#    end
#  end
#
#  local servers = {'pyright', 'gopls', 'rust_analyzer'}
#  for _, lsp in ipairs(servers) do
#    nvim_lsp[lsp].setup {
#      on_attach = on_attach,
#    }
#  end
#EOF
#'''
#
#[[plugins]]
#repo = 'anott03/nvim-lspinstall'
#
#
#[[plugins]]
#repo = 'nvim-lua/completion-nvim'
#
#[[plugins]]
#repo = 'SirVer/ultisnips'
#hook_add ='''
#let g:completion_enable_snippet = 'UltiSnips'
#'''
#[[plugins]]
#repo = 'honza/vim-snippets'
#
#[[plugin]]
#repo = 'kosayoda/nvim-lightbulb'
#hook_add = '''
#autocmd CursorHold,CursorHoldI * lua require'nvim-lightbulb'.update_lightbulb()
#
#:lua << EOF
#-- Showing defaults
#require'nvim-lightbulb'.update_lightbulb {
#    sign = {
#        enabled = true,
#        -- Priority of the gutter sign
#        priority = 10,
#    },
#    float = {
#        enabled = false,
#        -- Text to show in the popup float
#        text = "💡",
#        -- Available keys for window options:
#        -- - height     of floating window
#        -- - width      of floating window
#        -- - wrap_at    character to wrap at for computing height
#        -- - max_width  maximal width of floating window
#        -- - max_height maximal height of floating window
#        -- - pad_left   number of columns to pad contents at left
#        -- - pad_right  number of columns to pad contents at right
#        -- - pad_top    number of lines to pad contents at top
#        -- - pad_bottom number of lines to pad contents at bottom
#        -- - offset_x   x-axis offset of the floating window
#        -- - offset_y   y-axis offset of the floating window
#        -- - anchor     corner of float to place at the cursor (NW, NE, SW, SE)
#        -- - winblend   transparency of the window (0-100)
#        win_opts = {},
#    },
#    virtual_text = {
#        enabled = false,
#        -- Text to show at virtual text
#        text = "💡",
#    }
#}
#EOF
#'''
#
#### async
#[[plugins]]
#repo = 'skywind3000/asynctasks.vim'
#[[plugins]]
#
#repo = 'skywind3000/asyncrun.vim'
#
## Fuzzy Finder using Telescope
# [[plugins]]
# repo = 'nvim-lua/popup.nvim'
# [[plugins]]
# repo = 'nvim-lua/plenary.nvim'
# [[plugins]]
# repo = 'nvim-telescope/telescope.nvim'
# hook_add ='''
# " Find files using Telescope command-line sugar.
# nnoremap <leader>ff <cmd>Telescope find_files<cr>
# nnoremap <leader>fg <cmd>Telescope live_grep<cr>
# nnoremap <leader>fb <cmd>Telescope buffers<cr>
# nnoremap <leader>fh <cmd>Telescope help_tags<cr>
# nnoremap <leader>fl <cmd>Telescope git_files<cr>
# 
# "Mapping <Esc> to quit in insert mode
# :lua << EOF
# local actions = require('telescope.actions')
# require('telescope').setup{
#   defaults = {
#     mappings = {
#       i = {
#         ["<esc>"] = actions.close
#       },
#     },
#   }
# }
# EOF
# '''
# 
# [[plugins]]
# repo = 'nvim-telescope/telescope-fzf-writer.nvim'
# hook_add = '''
# :lua << EOF
# require('telescope').setup {
#     extensions = {
#         fzf_writer = {
#             minimum_grep_characters = 2,
#             minimum_files_characters = 2,
# 
#             -- Disabled by default.
#             -- Will probably slow down some aspects of the sorter, but can make color highlights.
#             -- I will work on this more later.
#             use_highlighter = true,
#         }
#     }
# }
# EOF
# '''
# 
# [[plugins]]
# repo = 'nvim-telescope/telescope-dap.nvim'
# depends = ['mfussenegger/nvim-dap','nvim-treesitter/nvim-treesitter']
# 
# [[plugins]]
# repo = 'GustavoKatel/telescope-asynctasks.nvim'
#
# [[plugins]]
# repo = 'nvim-telescope/telescope-media-files.nvim'
# depends = ['nvim-lua/plenary.nvim','nvim-telescope/telescope.nvim']
# hook_add ='''
# :lua << EOF
# require('telescope').load_extension('media_files')
# require'telescope'.setup {
#   extensions = {#
#     media_files = {
#      -- filetypes whitelist
#       -- defaults to {"png", "jpg", "mp4", "webm", "pdf"}
#       filetypes = {"png", "webp", "jpg", "jpeg"},
#       find_cmd = "rg" -- find command (defaults to `fd`)
#     }
#  },
# }
# EOF
# '''

# Better Syntax Highlighting using Tree-Sitter
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merge = 0
hook_add ='''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  sync_install = false, -- install languages synchronously (only applied to `ensure_installed`)
  ignore_install = {}, -- List of parsers to ignore installing
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = { "c", "rust" },  -- list of language that will be disabled
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
  indent = {
    enable = true
  },
  incremental_selection = {
    enable = true,
    keymaps = {
      --init_selection = "gnn",
      --scope_incremental = "grc",
      --node_incremental = "grn",
      --node_decremental = "grm",
    },
  },
}
EOF

"folding
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
'''
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
depends = ['nvim-treesitter/nvim-treesitter']
hook_add ='''
lua << EOF
require'nvim-treesitter.configs'.setup {
  textobjects = {
    select = {
      enable = true,

      -- Automatically jump forward to textobj, similar to targets.vim 
      lookahead = true,

      keymaps = {
        -- You can use the capture groups defined in textobjects.scm
        ["af"] = "@function.outer",
        ["if"] = "@function.inner",
        ["ac"] = "@class.outer",
        ["ic"] = "@class.inner",

        -- Or you can define your own textobjects like this
        ["iF"] = {
          python = "(function_definition) @function",
          cpp = "(function_definition) @function",
          c = "(function_definition) @function",
          java = "(method_declaration) @function",
        },
      },
    },
    swap = {
      enable = true,
      swap_next = {
        ["<leader>a"] = "@parameter.inner",
      },
      swap_previous = {
        ["<leader>A"] = "@parameter.inner",
      },
    },
    move = {
      enable = true,
      set_jumps = true, -- whether to set jumps in the jumplist
      goto_next_start = {
        ["]m"] = "@function.outer",
        ["]]"] = "@class.outer",
      },
      goto_next_end = {
        ["]M"] = "@function.outer",
        ["]["] = "@class.outer",
      },
      goto_previous_start = {
        ["[m"] = "@function.outer",
        ["[["] = "@class.outer",
      },
      goto_previous_end = {
        ["[M"] = "@function.outer",
        ["[]"] = "@class.outer",
      },
    },
    lsp_interop = {
      enable = true,
      border = 'none',
      peek_definition_code = {
        ["<leader>df"] = "@function.outer",
        ["<leader>dF"] = "@class.outer",
      },
    },
  },
}
EOF
'''

[[plugins]]
repo = 'romgrk/nvim-treesitter-context'
depends = ['nvim-treesitter/nvim-treesitter']
hook_add ='''
lua << EOF
require'treesitter-context'.setup{
    enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
    throttle = true, -- Throttles plugin updates (may improve performance)
    max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
    patterns = { -- Match patterns for TS nodes. These get wrapped to match at word boundaries.
        -- For all filetypes
        -- Note that setting an entry here replaces all other patterns for this entry.
        -- By setting the 'default' entry below, you can control which nodes you want to
        -- appear in the context window.
        default = {
            'class',
            'function',
            'method',
            -- 'for', -- These won't appear in the context
            -- 'while',
            -- 'if',
            -- 'switch',
            -- 'case',
        },
        -- Example for a specific filetype.
        -- If a pattern is missing, *open a PR* so everyone can benefit.
        --   rust = {
        --       'impl_item',
        --   },
    },
}
EOF
'''

[[plugins]]
repo = 'p00f/nvim-ts-rainbow'
depends = ['nvim-treesitter/nvim-treesitter']
hook_add ='''
lua << EOF
require'nvim-treesitter.configs'.setup {
  rainbow = {
    enable = true,
    extended_mode = true, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
    max_file_lines = nil, -- Do not enable for files with more than n lines, int
    -- colors = {}, -- table of hex strings
    -- termcolors = {} -- table of colour name strings
  }
}
EOF
'''
[[plugins]]
repo = 'windwp/nvim-ts-autotag'
depends = ['nvim-treesitter/nvim-treesitter']
hook_add ='''
lua << EOF
require'nvim-treesitter.configs'.setup {
  autotag = {
    enable = true,
  }
}
EOF
'''

[[plugins]]
repo = 'mfussenegger/nvim-ts-hint-textobject'
depends = ['nvim-treesitter/nvim-treesitter']
hook_add ='''
omap     <silent> m :<C-U>lua require('tsht').nodes()<CR>
vnoremap <silent> m :lua require('tsht').nodes()<CR>
'''


## Debugging
[[plugins]]
repo = 'Pocco81/DAPInstall.nvim'
#hook_add = '''```

[[plugins]]
repo = 'mfussenegger/nvim-dap'
hook_add = '''
nnoremap <silent> <leader><CR> :lua require'dap'.continue()<CR>
nnoremap <silent> <leader>dd :lua require('dap').continue()<CR>
nnoremap <silent> <leader>J :lua require'dap'.step_over()<CR>
nnoremap <silent> <leader>j :lua require'dap'.step_into()<CR>
nnoremap <silent> <leader><Down> :lua require'dap'.step_out()<CR>
nnoremap <silent> b :lua require'dap'.toggle_breakpoint()<CR>
nnoremap <silent> <leader>b :lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
nnoremap <silent> <leader>lp :lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>
nnoremap <silent> <leader>dr :lua require'dap'.repl.open()<CR>
nnoremap <silent> <leader>dl :lua require'dap'.repl.run_last()<CR>`
nnoremap <silent> <leader>dn :lua require('dap-python').test_method()<CR>
vnoremap <silent> <leader>ds <ESC>:lua require('dap-python').debug_selection()<CR>

lua << EOF
require('dap')
vim.fn.sign_define('DapBreakpoint', {text='●', texthl='', linehl='', numhl=''})
vim.fn.sign_define('DapStopped', {text='◎', texthl='', linehl='', numhl=''})

-- local dap = require "dap"
-- Modern LLVM installations come with a binary called lldb-vscode (or lldb-vscode-11). Use the same function as with vscode-cpptools and the following adapter configuration:

local dap = require('dap')
dap.adapters.lldb = {
  type = 'executable',
  command = '/usr/bin/lldb-vscode', -- adjust as needed
  name = "lldb"
}

dap.adapters.cpp = {
  type = 'executable',
  attach = {
    pidSelect = "ask"
  },
  command = 'lldb-vscode', -- my binary was called 'lldb-vscode-11'
  env = {
    LLDB_LAUNCH_FLAG_LAUNCH_IN_TTY = "YES"
  },
  name = "lldb"
}

dap.adapters.rust = {
    type = 'executable',
    attach = {
        pidProperty = "pid",
        pidSelect = "ask"
    },
    command = 'lldb-vscode', -- my binary was called 'lldb-vscode-11'
    env = {
        LLDB_LAUNCH_FLAG_LAUNCH_IN_TTY = "YES"
    },
    name = "lldb"
}

dap.configurations.cpp = {
  {
    name = "Launch",
    type = "lldb",
    request = "launch",
    program = function()
      return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
    end,
    cwd = '${workspaceFolder}',
    stopOnEntry = false,
    args = {},

    -- if you change `runInTerminal` to true, you might need to change the yama/ptrace_scope setting:
    --
    --    echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
    --
    -- Otherwise you might get the following error:
    --
    --    Error on launch: Failed to attach to the target process
    --
    -- But you should be aware of the implications:
    -- https://www.kernel.org/doc/html/latest/admin-guide/LSM/Yama.html
    runInTerminal = false,
  },
}

-- If you want to use this for rust and c, add something like this:

dap.configurations.c = dap.configurations.cpp
dap.configurations.rust = dap.configurations.cpp


-- Now you should be able to debug a Rust or C/C++ binary (compiled with -g flag!) with a vim command :DebugC main "Hello World!" or :DebugRust target/debug/myrustprogram. :DebugC will remember your last target. So you can leave away the arguments when using it the second time.
-- The first time you run it, the debug adapter will complain about a missing file nvim-dap.something. Just create this file. It is already there but has the name cppdbg.something.
-- you should rename cppdbg.ad7Engine.json to nvim-dap.ad7Engine.json in 'extension/debugAdapters/bin'.

vim.cmd [[
  command! -complete=file -nargs=* DebugC lua require "my_debug".start_c_debugger({<f-args>}, "gdb")
]]
vim.cmd [[
  command! -complete=file -nargs=* DebugRust lua require "my_debug".start_c_debugger({<f-args>}, "gdb", "rust-gdb")
]]

env = function()
  local variables = {}
  for k, v in pairs(vim.fn.environ()) do
    table.insert(variables, string.format("%s=%s", k, v))
  end
  return variables
end

-- Map K to hover while session is active.
local dap = require('dap')
local api = vim.api
local keymap_restore = {}
dap.listeners.after['event_initialized']['me'] = function()
  for _, buf in pairs(api.nvim_list_bufs()) do
    local keymaps = api.nvim_buf_get_keymap(buf, 'n')
    for _, keymap in pairs(keymaps) do
      if keymap.lhs == "K" then
        table.insert(keymap_restore, keymap)
        api.nvim_buf_del_keymap(buf, 'n', 'K')
      end
    end
  end
  api.nvim_set_keymap(
    'n', '<leader>k', '<Cmd>lua require("dap.ui.variables").hover()<CR>', { silent = true })
end

dap.listeners.after['event_terminated']['me'] = function()
  for _, keymap in pairs(keymap_restore) do
    api.nvim_buf_set_keymap(
      keymap.buffer,
      keymap.mode,
      keymap.lhs,
      keymap.rhs,
      { silent = keymap.silent == 1 }
    )
  end
  keymap_restore = {}
end

EOF
'''

#[[plugins]]
#repo = 'mfussenegger/nvim-dap-python'
#depends = ['mfussenegger/nvim-dap','nvim-treesitter/nvim-treesitter']

[[plugins]]
repo = 'theHamsta/nvim-dap-virtual-text'
depends = ['mfussenegger/nvim-dap','nvim-treesitter/nvim-treesitter']
hook_add ='''
lua << EOF

require("nvim-dap-virtual-text").setup {
-- enable this plugin (the default)
    enabled = true,                     
-- create commands DapVirtualTextEnable, DapVirtualTextDisable, DapVirtualTextToggle, 
--(DapVirtualTextForceRefresh for refreshing when debug adapter did not notify its termination)
    enabled_commands = true,            
-- highlight changed values with NvimDapVirtualTextChanged, else always NvimDapVirtualText
    highlight_changed_variables = true, 
-- highlight new variables in the same way as changed variables (if highlight_changed_variables)
    highlight_new_as_changed = false,   
-- show stop reason when stopped for exceptions
    show_stop_reason = true,            
-- prefix virtual text with comment string
    commented = false,      

-- experimental features:
-- position of virtual text, see `:h nvim_buf_set_extmark()`
    virt_text_pos = 'eol',              
-- show virtual text for all stack frames not only current. Only works for debugpy on my machine.
    all_frames = false,                 
-- show virtual lines instead of virtual text (will flicker!)
    virt_lines = false,                 
-- position the virtual text at a fixed window column (starting from the first text column) ,
-- e.g. 80 to position at column 80, see `:h nvim_buf_set_extmark()`
    virt_text_win_col = nil             
}

EOF
'''

[[plugins]]
repo = 'rcarriga/nvim-dap-ui'
depends = ['mfussenegger/nvim-dap']
hook_add = '''
"nnoremap <CR> <Cmd>lua require("dapui").eval()<CR>
"vnoremap <CR> <Cmd>lua require("dapui").eval()<CR>

lua << EOF

-- Automatically opening the UI is deprecated.
-- You can replicate previous behaviour by adding the following to your config
local dap, dapui = require('dap'), require('dapui') 
dap.listeners.after.event_initialized['dapui_config'] = function() dapui.open() end
dap.listeners.before.event_terminated['dapui_config'] = function() dapui.close() end
dap.listeners.before.event_exited['dapui_config'] = function() dapui.close() end

require("dapui").setup({
  icons = { expanded = "▾", collapsed = "▸" },
  mappings = {
    -- Use a table to apply multiple mappings
    expand = { "<CR>", "<2-LeftMouse>" },
    open = "o",
    remove = "d",
    edit = "e",
    repl = "r",
  },
  sidebar = {
    -- open_on_start = true,
    -- You can change the order of elements in the sidebar
    elements = {
      -- Provide as ID strings or tables with "id" and "size" keys
      -- { id = "scopes", size = 0.25, },
         { id = "breakpoints", size = 0.5 },
         { id = "stacks", size = 0.5 },
      --{ id = "watches", size = 0.25 },
    },
    size = 10,
    position = "top", -- Can be "left", "right", "top", "bottom"
  },
  tray = {
    -- open_on_start = true,
    elements = { "repl" },
    size = 10,
    position = "bottom", -- Can be "left", "right", "top", "bottom"
  },
  floating = {
    max_height = nil, -- These can be integers or a float between 0 and 1.
    max_width = nil, -- Floats will be treated as percentage of your screen.
    mappings = {
      close = { "q", "<Esc>" },
    },
  },
  windows = { indent = 1 },
})
EOF
'''
#END debug

[[plugins]]
repo = 'kevinhwang91/rnvimr'
hook_add = '''
"tnoremap <silent> <M-i> <C-\><C-n>:RnvimrResize<CR>
"nnoremap <silent> <M-o> :RnvimrToggle<CR>
"tnoremap <silent> <M-o> <C-\><C-n>:RnvimrToggle<CR>

" Make Ranger replace Netrw and be the file explorer
let g:rnvimr_enable_ex = 1

" Make Ranger to be hidden after picking a file
let g:rnvimr_enable_picker = 1

" Disable a border for floating window
let g:rnvimr_draw_border = 0

" Hide the files included in gitignore
let g:rnvimr_hide_gitignore = 1

" Change the border's color
let g:rnvimr_border_attr = {'fg': 14, 'bg': -1}

" Make Neovim wipe the buffers corresponding to the files deleted by Ranger
let g:rnvimr_enable_bw = 1

" Add a shadow window, value is equal to 100 will disable shadow
let g:rnvimr_shadow_winblend = 70

" Draw border with both
let g:rnvimr_ranger_cmd = 'ranger --cmd="set draw_borders both"'

" Link CursorLine into RnvimrNormal highlight in the Floating window
highlight link RnvimrNormal CursorLine

"nnoremap <silent> <M-o> :RnvimrToggle<CR>
"tnoremap <silent> <M-o> <C-\><C-n>:RnvimrToggle<CR>

" Resize floating window by all preset layouts
tnoremap <silent> <M-i> <C-\><C-n>:RnvimrResize<CR>

" Resize floating window by special preset layouts
"tnoremap <silent> <M-l> <C-\><C-n>:RnvimrResize 1,8,9,11,5<CR>

" Resize floating window by single preset layout
"tnoremap <silent> <M-y> <C-\><C-n>:RnvimrResize 6<CR>

" Map Rnvimr action
let g:rnvimr_action = {
            \ '<C-t>': 'NvimEdit tabedit',
            \ '<C-x>': 'NvimEdit split',
            \ '<C-v>': 'NvimEdit vsplit',
            \ 'gw': 'JumpNvimCwd',
            \ 'yw': 'EmitRangerCwd'
            \ }

" Add views for Ranger to adapt the size of floating window
let g:rnvimr_ranger_views = [
            \ {'minwidth': 50, 'ratio': []},
            \ {'minwidth': 50, 'maxwidth': 89, 'ratio': [1,1]},
            \ {'maxwidth': 49, 'ratio': [1]}
            \ ]

" Customize the initial layout
let g:rnvimr_layout = {
            \ 'relative': 'editor',
            \ 'width': float2nr(round(0.9 * &columns)),
            \ 'height': float2nr(round(0.7 * &lines)),
            \ 'col': float2nr(round(0.05 * &columns)),
            \ 'row': float2nr(round(0.15 * &lines)),
            \ 'style': 'minimal'
            \ }

" Customize multiple preset layouts
" '{}' represents the initial layout
let g:rnvimr_presets = [
            \ {'width': 0.600, 'height': 0.600},
            \ {},
            \ {'width': 0.800, 'height': 0.800},
            \ {'width': 0.950, 'height': 0.950},
            \ {'width': 0.500, 'height': 0.500, 'col': 0, 'row': 0},
            \ {'width': 0.500, 'height': 0.500, 'col': 0, 'row': 0.5},
            \ {'width': 0.500, 'height': 0.500, 'col': 0.5, 'row': 0},
            \ {'width': 0.500, 'height': 0.500, 'col': 0.5, 'row': 0.5},
            \ {'width': 0.500, 'height': 1.000, 'col': 0, 'row': 0},
            \ {'width': 0.500, 'height': 1.000, 'col': 0.5, 'row': 0},
            \ {'width': 1.000, 'height': 0.500, 'col': 0, 'row': 0},
            \ {'width': 1.000, 'height': 0.500, 'col': 0, 'row': 0.5}
            \ ]

" Fullscreen for initial layout
" let g:rnvimr_layout = {
"            \ 'relative': 'editor',
"            \ 'width': &columns,
"            \ 'height': &lines - 2,
"            \ 'col': 0,
"            \ 'row': 0,
"            \ 'style': 'minimal'
"            \ }
"
" Only use initial preset layout
" let g:rnvimr_presets = [{}]
'''
#[[plugins]]
#repo = 'nvim-treesitter/playground'

### for test
#[[plugins]]
#repo = 'roxma/vim-hug-neovim-rpc'

#[[plugins]]
#repo = 'roxma/vim-yarp'
#depends = ['roxma/vim-hug-neovim-rpc']

#[[plugins]]
#repo = 'janko/vim-test'

#[[plugins]]
#repo = 'rcarriga/vim-ultest'
#depends = ['roxma/vim-yarp','roxma/vim-hug-neovim-rpc','janko/vim-test']

# Integration with GitHub
#[[plugins]]
#repo = 'pwntester/octo.nvim'

