###dark vim 
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

#[[plugins]]
#repo ='Shougo/defx.nvim'

#[[plugins]]
#repo = 'kristijanhusak/defx-icons' 
#depends = ['Shougo/defx.nvim']

#[[plugins]]
#repo = 'kristijanhusak/defx-git' 
#depends = ['Shougo/defx.nvim']



###よく使われているvimのプラグイン top20
###https://qiita.com/reireias/items/5364dcaada1a5b88a206#1%E4%BD%8D-tpopevim-fugitive

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'airblade/vim-gitgutter'

#[[plugins]]
#repo = 'w0rp/ale'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
hook_add = 'set rtp+=/usr/local/opt/fzf'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['junegunn/fzf']
hook_add = '''
"" Mapping selecting mappings
" nmap <leader><tab> <plug>(fzf-maps-n)
" xmap <leader><tab> <plug>(fzf-maps-x)
" omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)

"inoremap <expr> <c-x><c-f> fzf#vim#complete#path('fd')
"inoremap <expr> <c-x><c-f> fzf#vim#complete#path('rg --files')

imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Path completion with custom source command
inoremap <expr> <c-x><c-f> fzf#vim#complete#path('fd')
inoremap <expr> <c-x><c-f> fzf#vim#complete#path('rg --files')

" Word completion with custom spec with popup layout option
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'window': { 'width': 0.2, 'height': 0.9, 'xoffset': 1 }})

" Replace the default dictionary completion with fzf-based fuzzy completion
inoremap <expr> <c-x><c-k> fzf#vim#complete('cat /usr/share/dict/words')

" Global line completion (not just open buffers. ripgrep required.)
inoremap <expr> <c-x><c-l> fzf#vim#complete(fzf#wrap({
  \ 'prefix': '^.*$',
  \ 'source': 'rg -n ^ --color always',
  \ 'options': '--ansi --delimiter : --nth 3..',
  \ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))

"function! s:make_sentence(lines)
"  return substitute(join(a:lines), '^.', '\=toupper(submatch(0))', '').'.'
"endfunction

"" inoremap <expr> <c-x><c-s> fzf#vim#complete({
"  \ 'source':  'cat /usr/share/dict/words',
"  \ 'reducer': function('<sid>make_sentence'),
"  \ 'options': '--multi --reverse --margin 15%,0',
"  \ 'left':    20})

" fzfによるCUI生活の改善
" https://blog.nijohando.jp/post/fzf-fish-vim/
nnoremap [Fzf] <Nop>
nmap <Leader><Leader> [Fzf]
nnoremap [Fzf]f :<C-u>Files ./<CR>
nnoremap [Fzf]F :<C-u>Files ~<CR>
nnoremap [Fzf]g :<C-u>GFiles<CR>
nnoremap [Fzf]G :<C-u>GFiles?<CR>
nnoremap [Fzf]b :<C-u>Buffers<CR>
nnoremap [Fzf]h :<C-u>History<CR>
" オレオレセッティング
nnoremap [Fzf]a :<C-u>Ag<CR>
nnoremap [Fzf]r :<C-u>Rg<CR>
nnoremap [Fzf]c :<C-u>Commands<CR>
nnoremap [Fzf]l :<C-u>Lines<CR>

" 画面分割
" nnoremap <C-s> <C-w>v
nnoremap <C-v> <C-w>v<C-w>l:<C-u>Files<CR>
" nnoremap <C-s> <C-w>s
nnoremap <C-s> <C-w>s<C-w>j:<C-u>Files<CR>

" Tab
" nnoremap <silent> <S-Tab> :tabnew<CR>
'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = ['vim-airline/vim-airline']

[[plugins]]
repo = 'sheerun/vim-polyglot'

#[[plugins]]
#repo = 'SirVer/ultisnips'

[[plugins]]
repo = 'jiangmiao/auto-pairs'



###オレ的vimプラグイン10選
###https://qiita.com/reireias/items/beaa3bb0e299ae934217

# [[plugins]]
# repo = 'dhruvasagar/vim-table-mode'

#[[plugins]]
#repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = 'set splitbelow'

#[[plufins]]
#repo = 'mattn/sonictemplate-vim'



###おすすめプラグイン 〜 Vimはいいぞ！ゴリラと学ぶVim講座(7)
###https://knowledge.sakura.ad.jp/23248/

#[[plugins]]
#repo = 'previm/previm'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

#[[plugins]]
#repo = 'markonm/traces.vim'

#[[plugins]]
#repo = 'skanehira/translate.vim'

###
#[[plugin]]
#repo = '/tomasr/molokai'
#hook_add = '''
#  syntax on
#  colorscheme molokai
#  set t_Co=256
#'''



[[plugins]]
repo = 'kana/vim-operator-user'
[[plugins]]
repo = 'kana/vim-operator-replace'
depends = ['kana/vim-operator-user']

#kana/vim-textobj-user/wiki
#https://github.com/kana/vim-textobj-user/wiki
[[plugins]]
repo = 'kana/vim-textobj-user'

#al/il for the current line
[[plugins]]
repo = 'kana/vim-textobj-line'

#ae/ie for the entire region of the current buffer
[[plugins]]
repo = 'kana/vim-textobj-entire'

#af/if and aF/iF for a function / extensible for any language
[[plugins]]
repo = 'kana/vim-textobj-indent'

#ay/iy for a syntax-highlighted item
[[plugins]]
repo = 'kana/vim-textobj-syntax'

#adh/idh and others for various elements in diff(1) output
[[plugins]]
repo = 'kana/vim-textobj-diff'

#af{char}/if{char} for a region between {char}s
[[plugins]]
repo = 'thinca/vim-textobj-between'

#ac/ic for a comment
[[plugins]]
repo = 'thinca/vim-textobj-comment'

#ap/ip for next file path (w/o basename), aP/iP for the previous file path (w/o basename)
[[plugins]]
repo = 'paulhybryant/vim-textobj-path'

#au/iu for a URL
[[plugins]]
repo ='mattn/vim-textobj-url'

# isb/asb for the closest region between any of () [] or {}.
[[plugins]]
repo ='osyo-manga/vim-textobj-multiblock'

#av/iv for a region between either _s or camelCaseVariables
[[plugins]]
repo = 'Julian/vim-textobj-variable-segment'

#aT/iT for "top level" blocks of code in arbitrary programming language
[[plugins]]
repo = 'adolenc/vim-textobj-toplevel'



# Vimの生産性を高める12の方法
# https://postd.cc/how-to-boost-your-vim-productivity/ 
[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''

" Default settings. (NOTE: Remove comments in dictionary before sourcing)
let g:expand_region_text_objects = {
      \ "iw" :0,
      \ "iW" :0,
      \ "isb" :1,
      \ "asb" :1,
      \ "il" :0,
      \ "ii" :1,
      \ "ai" :1,
      \ }

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
'''



# clever-f.vim でカーソルの横移動を便利にする
# https://rhysd.hatenablog.com/entry/2013/09/17/220837
[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
let g:clever_f_ignore_case = 1
let g:clever_f_smart_case = 1
'''



# Vimの縦移動を強化する
# https://qiita.com/uji_/items/5cc267d6a96c417a29ef
[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = 'let g:loaded_matchit = 1'



# 僕の推し Vimプラグインを見て！
# https://aiya000.github.io/Maid/vimconf.swp.2018/#/
[[plugins]]
repo = 'LeafCage/foldCC'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

#[[plugins]]
#repo = 'nathanaelkane/vim-indent-guides'



# 僕がVimで愛用しているプラグイン30連発
# https://liginc.co.jp/469142
#[[plugins]]
#repo = 'https://github.com/ervandew/supertab'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_do_mapping = 0
"map <Leader> <Plug>(easymotion-prefix)

" Gif config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
"map n <Plug>(easymotion-next)
"map N <Plug>(easymotion-prev)

"let g:EasyMotion_use_migemo = 0
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_add_search_history = 1

"map <Leader>l <Plug>(easymotion-lineforward)
"map <Leader>j <Plug>(easymotion-j)
"map <Leader>k <Plug>(easymotion-k)
"map <Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
" If you want to start window resize mode by `Ctrl+T`
let g:winresizer_start_key = '<C-r>'
" change keycode_mode 101(e) <-> 114(r)
let g:winresizer_keycode_mode = 114 
let g:winresizer_keycode_resize = 101
'''

#[[plugins]]
#repo = 'yuttie/comfortable-motion.vim'


# Vim Bootstrap 基本プラグイン
# https://qiita.com/uyo/items/2f8f1d6173b7ee0c0fac
[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'majutsushi/tagbar'



### completion lint tools by language-server-protocol
[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
nmap gD <Plug>(lsp-peek-definition)
vmap gD <Plug>(lsp-peek-definition)
nmap gd <Plug>(lsp-definition)
vmap gD <Plug>(lsp-definition)

nmap gC <Plug>(lsp-peek-declaration)
vmap gC <Plug>(lsp-peek-declaration)
nmap gc <Plug>(lsp-declaration)
vmap gc <Plug>(lsp-declaration)

nmap gT <Plug>(lsp-peek-type-definition)
vmap gT <Plug>(lsp-peek-type-definition)
nmap gt <Plug>(lsp-type-definition)
vmap gt <Plug>(lsp-type-definition)

nmap gI <Plug>(lsp-peek-implementation)
vmap gI <Plug>(lsp-peek-implementation)
nmap gi <Plug>(lsp-implementation)
vmap gi <Plug>(lsp-implementation)

"nmap ge <Plug>(lsp-next-error)
"vmap ge <Plug>(lsp-next-error)
"nmap gE <Plug>(lsp-previous-error)
"vmap gE <Plug>(lsp-previous-error)

nmap gw <Plug>(lsp-next-diagnostic)
vmap gw <Plug>(lsp-next-diagnostic)
nmap gW <Plug>(lsp-previous-diagnostic)
vmap gW <Plug>(lsp-previous-diagnostic)
'''
[[plugins]]
repo = 'mattn/vim-lsp-settings'
merged = '0'
hook_add = '''
"let g:lsp_settings = {
"\  'clangd': {'cmd': ['clangd-6.0']},
"\  'efm-langserver': {'disabled': v:false}
"\}
'''
[[plugins]]
repo = 'mattn/vim-lsp-icons'
[[plugins]]
repo = 'mattn/efm-langserver'

#[[plugins]]
#repo = 'Shougo/neosnippet.vim'

#[[plugins]]
#repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
"inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

let g:asyncomplete_auto_popup = 0
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
"  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ asyncomplete#force_refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" オレオレセッティング
let g:asyncomplete_auto_completeopt = 0

" Vimの補完を他エディタやIDEのような挙動にするようにする 
" https://note.com/yasukotelin/n/na87dc604e042
" 補完表示時のEnterで改行をしない
inoremap <expr><CR>  pumvisible() ? "<C-y>" : "<CR>"
set completeopt=menuone,noinsert
inoremap <expr><C-n> pumvisible() ? "<Down>" : "<C-n>"
inoremap <expr><C-p> pumvisible() ? "<Up>" : "<C-p>"

"オレオレセッティング
inoremap <expr><esc> pumvisible() ? "<CR>" : "<esc>"
'''
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
hook_add = '''
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'whitelist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))
'''

[[plugins]]
repo = 'yami-beta/asyncomplete-omni.vim'
hook_add = '''
call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
\ 'name': 'omni',
\ 'whitelist': ['*'],
\ 'blacklist': [],
\ 'completor': function('asyncomplete#sources#omni#completor')
\  }))
'''

#[[plugins]]
#repo='prabirshrestha/asyncomplete-neosnippet.vim'
#hook_add='''
#call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
#    \ 'name': 'neosnippet',
#    \ 'whitelist': ['*'],
#    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
#    \ }))
#imap <C-k>     <Plug>(neosnippet_expand_or_jump)
#smap <C-k>     <Plug>(neosnippet_expand_or_jump)
#xmap <C-k>     <Plug>(neosnippet_expand_target)
#'''

#w3m.vimで快適ブラウジング
#https://sites.google.com/site/hymd3a/vim/w3m-vim
#[[plugins]]
#repo = 'yuratomo/w3m.vim'
#hook_add = '''
#nnoremap <leader>w :W3mTab google 
#let g:w3m#external_browser = 'firefox'
#nnoremap <leader>E :W3mShowExtenalBrowser
#let g:w3m#hit_a_hint_key = 'f'
#'''

[[plugins]]
repo = 'pseewald/vim-anyfold'
hook_add = '''
filetype plugin indent on " required
syntax on                 " required
" activate for all filetypes
autocmd Filetype * AnyFoldActivate
" or
" activate for a specific filetype
"autocmd Filetype <your-filetype> AnyFoldActivate
" close all folds
" set foldlevel=0
" or
" Open all folds
 set foldlevel=99 
'''


[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
"set to 0 if you want to enable it later via :RainbowToggle
let g:rainbow_active = 1 
"nnoremap j [j
"nnoremap k ]k
'''

[[plugins]]
repo = 'arecarn/vim-fold-cycle'
hook_add = '''
"disable default mappings
let g:fold_cycle_default_mapping = 0 
" Won't close when max fold is opened
let g:fold_cycle_toggle_max_open  = 0
" Won't open when max fold is closed
let g:fold_cycle_toggle_max_close = 0
'''

[[plugins]]
repo = 'dominikduda/vim_current_word'
hook_add = '''
let g:vim_current_word#highlight_current_word = 0
'''

#[[plugins]]
#repo = 'lfilho/cosco.vim'
#  hook_add '''
#  let g:cosco_ignore_comment_lines = 1
# '''

[[plugins]]
repo = 'voldikss/vim-translator'
hook_add = '''
"let g:translator_target_lang = "ja"
"let g:translator_default_engines = "google"

""" Configuration example
" Echo translation in the cmdline
nmap <silent> <Leader>t <Plug>Translate
vmap <silent> <Leader>t <Plug>TranslateV
" Display translation in a window
nmap <silent> <Leader>w <Plug>TranslateW
vmap <silent> <Leader>w <Plug>TranslateWV
" Replace the text with translation
nmap <silent> <Leader>r <Plug>TranslateR
vmap <silent> <Leader>r <Plug>TranslateRV
" Translate the text in clipboard
nmap <silent> <Leader>x <Plug>TranslateX

'''


# vim・neovimでできるマークダウン　[リアルタイムプレビュー完備]
# https://qiita.com/Nedward/items/24a6c5aaec8c4fd86626
[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_conceal = 0
"let g:tex_conceal = ""
"let g:vim_markdown_math = 1
let g:vim_markdown_conceal_code_blocks = 0

'''

[[plugins]]
repo = 'IchigoPantsu/previm'
hook_add = '''
autocmd BufRead,BufNewFile *.md  set filetype=markdown
nnoremap <silent> <C-p> :PrevimOpen<CR>
let g:vim_markdown_folding_disabled=1
let g:previm_enable_realtime=1
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'iberianpig/ranger-explorer.vim'
depends = ['rbgrouleff/bclose.vim']
hook_add = '''
let g:ranger_explorer_keymap_edit    = '<C-o>'
let g:ranger_explorer_keymap_tabedit = '<C-t>'
let g:ranger_explorer_keymap_split   = '<C-s>'
let g:ranger_explorer_keymap_vsplit  = '<C-v>'

nnoremap <silent><Leader>c :RangerOpenCurrentDir<CR>
nnoremap <silent><Leader>f :RangerOpenProjectRootDir<CR>
'''

# for renger-explorer.vim
[[plugins]]
repo = 'rbgrouleff/bclose.vim'

[[plugins]]
repo = 'adelarsq/vim-hackernews'

#for Regolith
[[plugins]]
repo = 'ayu-theme/ayu-vim'

#for manjaro_i3wm
[[plugins]]
repo = 'sainnhe/sonokai'
